/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class flat_backend_WL */

#ifndef _Included_flat_backend_WL
#define _Included_flat_backend_WL
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     flat_backend_WL
 * Method:    Init
 * Signature: (IIIZ)J
 */
JNIEXPORT jlong JNICALL Java_flat_backend_WL_Init
  (JNIEnv *, jclass, jint, jint, jint, jboolean);

/*
 * Class:     flat_backend_WL
 * Method:    Finish
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_Finish
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    ContextCreate
 * Signature: (I)J
 */
JNIEXPORT jlong JNICALL Java_flat_backend_WL_ContextCreate
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_WL
 * Method:    ContextAssign
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_ContextAssign
  (JNIEnv *, jclass, jlong);

/*
 * Class:     flat_backend_WL
 * Method:    ContextDestroy
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_ContextDestroy
  (JNIEnv *, jclass, jlong);

/*
 * Class:     flat_backend_WL
 * Method:    SwapBuffers
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_SwapBuffers
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    HandleEvents
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_HandleEvents
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    SetVsync
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_SetVsync
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_WL
 * Method:    IsTransparent
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_flat_backend_WL_IsTransparent
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    SetFullscreen
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_SetFullscreen
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     flat_backend_WL
 * Method:    IsFullscreen
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_flat_backend_WL_IsFullscreen
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    SetResizable
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_SetResizable
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     flat_backend_WL
 * Method:    IsResizable
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_flat_backend_WL_IsResizable
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    SetDecorated
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_SetDecorated
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     flat_backend_WL
 * Method:    IsDecorated
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_flat_backend_WL_IsDecorated
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    SetTitle
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_SetTitle
  (JNIEnv *, jclass, jstring);

/*
 * Class:     flat_backend_WL
 * Method:    GetTitle
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_flat_backend_WL_GetTitle
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    SetIcon
 * Signature: ([BII)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_SetIcon
  (JNIEnv *, jclass, jbyteArray, jint, jint);

/*
 * Class:     flat_backend_WL
 * Method:    SetPosition
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_SetPosition
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_WL
 * Method:    GetX
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_WL_GetX
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    GetY
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_WL_GetY
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    SetSize
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_SetSize
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_WL
 * Method:    GetWidth
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_WL_GetWidth
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    GetHeight
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_WL_GetHeight
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    GetClientWidth
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_WL_GetClientWidth
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    GetClientHeight
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_WL_GetClientHeight
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    GetPhysicalWidth
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_flat_backend_WL_GetPhysicalWidth
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    GetPhysicalHeight
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_flat_backend_WL_GetPhysicalHeight
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    GetDpi
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_flat_backend_WL_GetDpi
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    SetSizeLimits
 * Signature: (IIII)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_SetSizeLimits
  (JNIEnv *, jclass, jint, jint, jint, jint);

/*
 * Class:     flat_backend_WL
 * Method:    GetMinWidth
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_WL_GetMinWidth
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    GetMinHeight
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_WL_GetMinHeight
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    GetMaxWidth
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_WL_GetMaxWidth
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    GetMaxHeight
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_WL_GetMaxHeight
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    Show
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_Show
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    Hide
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_Hide
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    Close
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_Close
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    Maximize
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_Maximize
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    Minimize
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_Minimize
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    Restore
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_Restore
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    Focus
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_Focus
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    IsShown
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_flat_backend_WL_IsShown
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    IsClosed
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_flat_backend_WL_IsClosed
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    IsMaximized
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_flat_backend_WL_IsMaximized
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    IsMinimized
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_flat_backend_WL_IsMinimized
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    GetInputMode
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_WL_GetInputMode
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_WL
 * Method:    SetInputMode
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_SetInputMode
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_WL
 * Method:    GetKeyName
 * Signature: (II)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_flat_backend_WL_GetKeyName
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_WL
 * Method:    GetKey
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_WL_GetKey
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_WL
 * Method:    GetMouseButton
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_WL_GetMouseButton
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_WL
 * Method:    GetCursorX
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_flat_backend_WL_GetCursorX
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    GetCursorY
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_flat_backend_WL_GetCursorY
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_WL
 * Method:    SetCursorPos
 * Signature: (DD)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_SetCursorPos
  (JNIEnv *, jclass, jdouble, jdouble);

/*
 * Class:     flat_backend_WL
 * Method:    CreateCursor
 * Signature: ([BIIII)J
 */
JNIEXPORT jlong JNICALL Java_flat_backend_WL_CreateCursor
  (JNIEnv *, jclass, jbyteArray, jint, jint, jint, jint);

/*
 * Class:     flat_backend_WL
 * Method:    CreateStandardCursor
 * Signature: (I)J
 */
JNIEXPORT jlong JNICALL Java_flat_backend_WL_CreateStandardCursor
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_WL
 * Method:    DestroyCursor
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_DestroyCursor
  (JNIEnv *, jclass, jlong);

/*
 * Class:     flat_backend_WL
 * Method:    SetCursor
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_SetCursor
  (JNIEnv *, jclass, jlong);

/*
 * Class:     flat_backend_WL
 * Method:    JoystickPresent
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_WL_JoystickPresent
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_WL
 * Method:    GetJoystickAxesCount
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_WL_GetJoystickAxesCount
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_WL
 * Method:    GetJoystickAxes
 * Signature: (I[F)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_GetJoystickAxes
  (JNIEnv *, jclass, jint, jfloatArray);

/*
 * Class:     flat_backend_WL
 * Method:    GetJoystickButtonsCount
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_WL_GetJoystickButtonsCount
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_WL
 * Method:    GetJoystickButtons
 * Signature: (I[I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_GetJoystickButtons
  (JNIEnv *, jclass, jint, jintArray);

/*
 * Class:     flat_backend_WL
 * Method:    GetJoystickName
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_flat_backend_WL_GetJoystickName
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_WL
 * Method:    SetWindowPosCallback
 * Signature: (Lflat/backend/WLEnuns/WindowPosCallback;)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_SetWindowPosCallback
  (JNIEnv *, jclass, jobject);

/*
 * Class:     flat_backend_WL
 * Method:    SetWindowSizeCallback
 * Signature: (Lflat/backend/WLEnuns/WindowSizeCallback;)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_SetWindowSizeCallback
  (JNIEnv *, jclass, jobject);

/*
 * Class:     flat_backend_WL
 * Method:    SetWindowCloseCallback
 * Signature: (Lflat/backend/WLEnuns/WindowCloseCallback;)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_SetWindowCloseCallback
  (JNIEnv *, jclass, jobject);

/*
 * Class:     flat_backend_WL
 * Method:    SetWindowRefreshCallback
 * Signature: (Lflat/backend/WLEnuns/WindowRefreshCallback;)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_SetWindowRefreshCallback
  (JNIEnv *, jclass, jobject);

/*
 * Class:     flat_backend_WL
 * Method:    SetWindowFocusCallback
 * Signature: (Lflat/backend/WLEnuns/WindowFocusCallback;)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_SetWindowFocusCallback
  (JNIEnv *, jclass, jobject);

/*
 * Class:     flat_backend_WL
 * Method:    SetWindowIconifyCallback
 * Signature: (Lflat/backend/WLEnuns/WindowIconifyCallback;)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_SetWindowIconifyCallback
  (JNIEnv *, jclass, jobject);

/*
 * Class:     flat_backend_WL
 * Method:    SetFramebufferSizeCallback
 * Signature: (Lflat/backend/WLEnuns/WindowBufferSizeCallback;)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_SetFramebufferSizeCallback
  (JNIEnv *, jclass, jobject);

/*
 * Class:     flat_backend_WL
 * Method:    SetKeyCallback
 * Signature: (Lflat/backend/WLEnuns/KeyCallback;)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_SetKeyCallback
  (JNIEnv *, jclass, jobject);

/*
 * Class:     flat_backend_WL
 * Method:    SetCharCallback
 * Signature: (Lflat/backend/WLEnuns/CharCallback;)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_SetCharCallback
  (JNIEnv *, jclass, jobject);

/*
 * Class:     flat_backend_WL
 * Method:    SetCharModsCallback
 * Signature: (Lflat/backend/WLEnuns/CharModsCallback;)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_SetCharModsCallback
  (JNIEnv *, jclass, jobject);

/*
 * Class:     flat_backend_WL
 * Method:    SetMouseButtonCallback
 * Signature: (Lflat/backend/WLEnuns/MouseButtonCallback;)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_SetMouseButtonCallback
  (JNIEnv *, jclass, jobject);

/*
 * Class:     flat_backend_WL
 * Method:    SetCursorPosCallback
 * Signature: (Lflat/backend/WLEnuns/CursorPosCallback;)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_SetCursorPosCallback
  (JNIEnv *, jclass, jobject);

/*
 * Class:     flat_backend_WL
 * Method:    SetCursorEnterCallback
 * Signature: (Lflat/backend/WLEnuns/CursorEnterCallback;)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_SetCursorEnterCallback
  (JNIEnv *, jclass, jobject);

/*
 * Class:     flat_backend_WL
 * Method:    SetScrollCallback
 * Signature: (Lflat/backend/WLEnuns/ScrollCallback;)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_SetScrollCallback
  (JNIEnv *, jclass, jobject);

/*
 * Class:     flat_backend_WL
 * Method:    SetDropCallback
 * Signature: (Lflat/backend/WLEnuns/DropCallback;)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_SetDropCallback
  (JNIEnv *, jclass, jobject);

/*
 * Class:     flat_backend_WL
 * Method:    SetJoystickCallback
 * Signature: (Lflat/backend/WLEnuns/JoyCallback;)V
 */
JNIEXPORT void JNICALL Java_flat_backend_WL_SetJoystickCallback
  (JNIEnv *, jclass, jobject);

#ifdef __cplusplus
}
#endif
#endif
