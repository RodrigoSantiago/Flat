/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class flat_backend_GL */

#ifndef _Included_flat_backend_GL
#define _Included_flat_backend_GL
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     flat_backend_GL
 * Method:    Flush
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_Flush
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    Finish
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_Finish
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    Clear
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_Clear
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    SetClearColor
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_SetClearColor
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    SetClearDepth
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_SetClearDepth
  (JNIEnv *, jclass, jdouble);

/*
 * Class:     flat_backend_GL
 * Method:    SetClearStencil
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_SetClearStencil
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    GetClearColor
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_GetClearColor
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    GetClearDepth
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_GetClearDepth
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    GetClearStencil
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_GetClearStencil
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    ReadPixels
 * Signature: (IIIIIJ)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_ReadPixels
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jlong);

/*
 * Class:     flat_backend_GL
 * Method:    ReadPixelsB
 * Signature: (IIII[BI)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_ReadPixelsB
  (JNIEnv *, jclass, jint, jint, jint, jint, jbyteArray, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ReadPixelsS
 * Signature: (IIII[SI)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_ReadPixelsS
  (JNIEnv *, jclass, jint, jint, jint, jint, jshortArray, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ReadPixelsI
 * Signature: (IIII[II)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_ReadPixelsI
  (JNIEnv *, jclass, jint, jint, jint, jint, jintArray, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ReadPixelsF
 * Signature: (IIII[FI)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_ReadPixelsF
  (JNIEnv *, jclass, jint, jint, jint, jint, jfloatArray, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ReadPixelsBuffer
 * Signature: (IIIIILjava/nio/Buffer;I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_ReadPixelsBuffer
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jobject, jint);

/*
 * Class:     flat_backend_GL
 * Method:    SetDebug
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_SetDebug
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     flat_backend_GL
 * Method:    GetError
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_GetError
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    SetHint
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_SetHint
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    GetHint
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_GetHint
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    SetViewport
 * Signature: (IIII)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_SetViewport
  (JNIEnv *, jclass, jint, jint, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    GetViewportX
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_GetViewportX
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    GetViewportY
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_GetViewportY
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    GetViewportWidth
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_GetViewportWidth
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    GetViewportHeight
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_GetViewportHeight
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    EnableScissorTest
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_EnableScissorTest
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     flat_backend_GL
 * Method:    IsScissorTestEnabled
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_flat_backend_GL_IsScissorTestEnabled
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    SetScissor
 * Signature: (IIII)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_SetScissor
  (JNIEnv *, jclass, jint, jint, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    GetScissorX
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_GetScissorX
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    GetScissorY
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_GetScissorY
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    GetScissorWidth
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_GetScissorWidth
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    GetScissorHeight
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_GetScissorHeight
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    EnableRasterizer
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_EnableRasterizer
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     flat_backend_GL
 * Method:    IsRasterizerEnabled
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_flat_backend_GL_IsRasterizerEnabled
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    SetPixelStore
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_SetPixelStore
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    GetPixelStore
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_GetPixelStore
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    SetColorMask
 * Signature: (ZZZZ)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_SetColorMask
  (JNIEnv *, jclass, jboolean, jboolean, jboolean, jboolean);

/*
 * Class:     flat_backend_GL
 * Method:    GetColorMaskR
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_flat_backend_GL_GetColorMaskR
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    GetColorMaskG
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_flat_backend_GL_GetColorMaskG
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    GetColorMaskB
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_flat_backend_GL_GetColorMaskB
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    GetColorMaskA
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_flat_backend_GL_GetColorMaskA
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    EnableDepthTest
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_EnableDepthTest
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     flat_backend_GL
 * Method:    IsDepthTestEnabled
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_flat_backend_GL_IsDepthTestEnabled
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    SetDepthMask
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_SetDepthMask
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     flat_backend_GL
 * Method:    GetDepthMask
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_flat_backend_GL_GetDepthMask
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    SetDepthFunction
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_SetDepthFunction
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    GetDepthFunction
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_GetDepthFunction
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    SetDepthRange
 * Signature: (DD)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_SetDepthRange
  (JNIEnv *, jclass, jdouble, jdouble);

/*
 * Class:     flat_backend_GL
 * Method:    GetDepthRangeNear
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_flat_backend_GL_GetDepthRangeNear
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    GetDepthRangeFar
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_flat_backend_GL_GetDepthRangeFar
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    EnableStencilTest
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_EnableStencilTest
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     flat_backend_GL
 * Method:    IsStencilTestEnabled
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_flat_backend_GL_IsStencilTestEnabled
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    SetStencilMask
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_SetStencilMask
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    GetStencilMask
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_GetStencilMask
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    SetStencilFunction
 * Signature: (IIII)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_SetStencilFunction
  (JNIEnv *, jclass, jint, jint, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    GetStencilFunction
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_GetStencilFunction
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    GetStencilFunctionRef
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_GetStencilFunctionRef
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    GetStencilFunctionMask
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_GetStencilFunctionMask
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    SetStencilOperation
 * Signature: (IIII)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_SetStencilOperation
  (JNIEnv *, jclass, jint, jint, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    GetStencilOperationStencilFail
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_GetStencilOperationStencilFail
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    GetStencilOperationDepthFail
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_GetStencilOperationDepthFail
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    GetStencilOperationDepthPass
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_GetStencilOperationDepthPass
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    EnableBlend
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_EnableBlend
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     flat_backend_GL
 * Method:    IsBlendEnabled
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_flat_backend_GL_IsBlendEnabled
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    SetBlendFunction
 * Signature: (IIII)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_SetBlendFunction
  (JNIEnv *, jclass, jint, jint, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    GetBlendFunctionSrcRGB
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_GetBlendFunctionSrcRGB
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    GetBlendFunctionDstRGB
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_GetBlendFunctionDstRGB
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    GetBlendFunctionSrcAlpha
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_GetBlendFunctionSrcAlpha
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    GetBlendFunctionDstAlpha
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_GetBlendFunctionDstAlpha
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    SetBlendEquation
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_SetBlendEquation
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    GetBlendEquationRGB
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_GetBlendEquationRGB
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    GetBlendEquationAlpha
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_GetBlendEquationAlpha
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    SetBlendColor
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_SetBlendColor
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    GetBlendColor
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_GetBlendColor
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    EnableCullface
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_EnableCullface
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     flat_backend_GL
 * Method:    IsCullfaceEnabled
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_flat_backend_GL_IsCullfaceEnabled
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    SetCullface
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_SetCullface
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    GetCullface
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_GetCullface
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    SetFrontFace
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_SetFrontFace
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    GetFrontFace
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_GetFrontFace
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    EnableMultisample
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_EnableMultisample
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     flat_backend_GL
 * Method:    IsMultisampleEnabled
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_flat_backend_GL_IsMultisampleEnabled
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    SetLineWidth
 * Signature: (F)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_SetLineWidth
  (JNIEnv *, jclass, jfloat);

/*
 * Class:     flat_backend_GL
 * Method:    GetLineWidth
 * Signature: ()F
 */
JNIEXPORT jfloat JNICALL Java_flat_backend_GL_GetLineWidth
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    DrawArrays
 * Signature: (IIII)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_DrawArrays
  (JNIEnv *, jclass, jint, jint, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    DrawElements
 * Signature: (IIIIJ)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_DrawElements
  (JNIEnv *, jclass, jint, jint, jint, jint, jlong);

/*
 * Class:     flat_backend_GL
 * Method:    DrawElementsB
 * Signature: (III[BI)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_DrawElementsB
  (JNIEnv *, jclass, jint, jint, jint, jbyteArray, jint);

/*
 * Class:     flat_backend_GL
 * Method:    DrawElementsS
 * Signature: (III[SI)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_DrawElementsS
  (JNIEnv *, jclass, jint, jint, jint, jshortArray, jint);

/*
 * Class:     flat_backend_GL
 * Method:    DrawElementsI
 * Signature: (III[II)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_DrawElementsI
  (JNIEnv *, jclass, jint, jint, jint, jintArray, jint);

/*
 * Class:     flat_backend_GL
 * Method:    DrawElementsBuffer
 * Signature: (IIIILjava/nio/Buffer;I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_DrawElementsBuffer
  (JNIEnv *, jclass, jint, jint, jint, jint, jobject, jint);

/*
 * Class:     flat_backend_GL
 * Method:    FrameBufferCreate
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_FrameBufferCreate
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    FrameBufferDestroy
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_FrameBufferDestroy
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    FrameBufferBind
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_FrameBufferBind
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    FrameBufferGetBound
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_FrameBufferGetBound
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    FrameBufferBlit
 * Signature: (IIIIIIIIII)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_FrameBufferBlit
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    FrameBufferTexture2D
 * Signature: (IIIII)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_FrameBufferTexture2D
  (JNIEnv *, jclass, jint, jint, jint, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    FrameBufferTextureMultisample
 * Signature: (III)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_FrameBufferTextureMultisample
  (JNIEnv *, jclass, jint, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    FrameBufferRenderBuffer
 * Signature: (III)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_FrameBufferRenderBuffer
  (JNIEnv *, jclass, jint, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    FrameBufferGetStatus
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_FrameBufferGetStatus
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    FrameBufferGetObjectType
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_FrameBufferGetObjectType
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    FrameBufferGetObjectId
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_FrameBufferGetObjectId
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    FrameBufferGetPixelDataSize
 * Signature: (II[I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_FrameBufferGetPixelDataSize
  (JNIEnv *, jclass, jint, jint, jintArray);

/*
 * Class:     flat_backend_GL
 * Method:    FrameBufferSetTargets
 * Signature: (IIIIIIII)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_FrameBufferSetTargets
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    FrameBufferGetTargets
 * Signature: ([I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_FrameBufferGetTargets
  (JNIEnv *, jclass, jintArray);

/*
 * Class:     flat_backend_GL
 * Method:    RenderBufferCreate
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_RenderBufferCreate
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    RenderBufferDestroy
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_RenderBufferDestroy
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    RenderBufferBind
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_RenderBufferBind
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    RenderBufferGetBound
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_RenderBufferGetBound
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    RenderBufferStorage
 * Signature: (III)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_RenderBufferStorage
  (JNIEnv *, jclass, jint, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    RenderBufferStorageMultsample
 * Signature: (IIII)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_RenderBufferStorageMultsample
  (JNIEnv *, jclass, jint, jint, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    RenderBufferGetFormat
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_RenderBufferGetFormat
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    RenderBufferGetWidth
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_RenderBufferGetWidth
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    RenderBufferGetHeight
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_RenderBufferGetHeight
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    SetActiveTexture
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_SetActiveTexture
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    GetActiveTexture
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_GetActiveTexture
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    TextureCreate
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_TextureCreate
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    TextureDestroy
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_TextureDestroy
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureBind
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_TextureBind
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureGetBound
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_TextureGetBound
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureGenerateMipmap
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_TextureGenerateMipmap
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureMultisample
 * Signature: (IIIIZ)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_TextureMultisample
  (JNIEnv *, jclass, jint, jint, jint, jint, jboolean);

/*
 * Class:     flat_backend_GL
 * Method:    TextureCopy
 * Signature: (IIIIIIII)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_TextureCopy
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureSubCopy
 * Signature: (IIIIIIII)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_TextureSubCopy
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureData
 * Signature: (IIIIIIJ)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_TextureData
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jlong);

/*
 * Class:     flat_backend_GL
 * Method:    TextureDataB
 * Signature: (IIIIII[BI)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_TextureDataB
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jbyteArray, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureDataS
 * Signature: (IIIIII[SI)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_TextureDataS
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jshortArray, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureDataI
 * Signature: (IIIIII[II)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_TextureDataI
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jintArray, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureDataF
 * Signature: (IIIIII[FI)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_TextureDataF
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jfloatArray, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureDataBuffer
 * Signature: (IIIIIILjava/nio/Buffer;I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_TextureDataBuffer
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jobject, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureSubData
 * Signature: (IIIIIIIJ)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_TextureSubData
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jlong);

/*
 * Class:     flat_backend_GL
 * Method:    TextureSubDataB
 * Signature: (IIIIIII[BI)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_TextureSubDataB
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jbyteArray, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureSubDataS
 * Signature: (IIIIIII[SI)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_TextureSubDataS
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jshortArray, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureSubDataI
 * Signature: (IIIIIII[II)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_TextureSubDataI
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jintArray, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureSubDataF
 * Signature: (IIIIIII[FI)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_TextureSubDataF
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jfloatArray, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureSubDataBuffer
 * Signature: (IIIIIIILjava/nio/Buffer;I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_TextureSubDataBuffer
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jobject, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureSetLevels
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_TextureSetLevels
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureGetLevels
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_TextureGetLevels
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureGetWidth
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_TextureGetWidth
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureGetHeight
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_TextureGetHeight
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureGetFormat
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_TextureGetFormat
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureSetLOD
 * Signature: (IFFF)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_TextureSetLOD
  (JNIEnv *, jclass, jint, jfloat, jfloat, jfloat);

/*
 * Class:     flat_backend_GL
 * Method:    TextureGetLODBias
 * Signature: (I)F
 */
JNIEXPORT jfloat JNICALL Java_flat_backend_GL_TextureGetLODBias
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureGetLODMax
 * Signature: (I)F
 */
JNIEXPORT jfloat JNICALL Java_flat_backend_GL_TextureGetLODMax
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureGetLODMin
 * Signature: (I)F
 */
JNIEXPORT jfloat JNICALL Java_flat_backend_GL_TextureGetLODMin
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureSetFilter
 * Signature: (III)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_TextureSetFilter
  (JNIEnv *, jclass, jint, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureGetFilterMag
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_TextureGetFilterMag
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureGetFilterMin
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_TextureGetFilterMin
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureSetSwizzle
 * Signature: (IIIII)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_TextureSetSwizzle
  (JNIEnv *, jclass, jint, jint, jint, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureGetSwizzleR
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_TextureGetSwizzleR
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureGetSwizzleG
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_TextureGetSwizzleG
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureGetSwizzleB
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_TextureGetSwizzleB
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureGetSwizzleA
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_TextureGetSwizzleA
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureSetBorderColor
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_TextureSetBorderColor
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureGetBorderColor
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_TextureGetBorderColor
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureSetWrap
 * Signature: (III)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_TextureSetWrap
  (JNIEnv *, jclass, jint, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureGetWrapHorizontal
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_TextureGetWrapHorizontal
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureGetWrapVertical
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_TextureGetWrapVertical
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureSetCompareFunction
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_TextureSetCompareFunction
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureGetCompareFunction
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_TextureGetCompareFunction
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureSetCompareMode
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_TextureSetCompareMode
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TextureGetCompareMode
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_TextureGetCompareMode
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    BufferCreate
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_BufferCreate
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    BufferDestroy
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_BufferDestroy
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    BufferBind
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_BufferBind
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    BufferBindBase
 * Signature: (III)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_BufferBindBase
  (JNIEnv *, jclass, jint, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    BufferBindRange
 * Signature: (IIIII)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_BufferBindRange
  (JNIEnv *, jclass, jint, jint, jint, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    BufferGetBound
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_BufferGetBound
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    BufferDataB
 * Signature: (I[BIII)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_BufferDataB
  (JNIEnv *, jclass, jint, jbyteArray, jint, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    BufferDataS
 * Signature: (I[SIII)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_BufferDataS
  (JNIEnv *, jclass, jint, jshortArray, jint, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    BufferDataI
 * Signature: (I[IIII)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_BufferDataI
  (JNIEnv *, jclass, jint, jintArray, jint, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    BufferDataF
 * Signature: (I[FIII)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_BufferDataF
  (JNIEnv *, jclass, jint, jfloatArray, jint, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    BufferDataBuffer
 * Signature: (ILjava/nio/Buffer;III)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_BufferDataBuffer
  (JNIEnv *, jclass, jint, jobject, jint, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    BufferSubDataB
 * Signature: (I[BIIJ)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_BufferSubDataB
  (JNIEnv *, jclass, jint, jbyteArray, jint, jint, jlong);

/*
 * Class:     flat_backend_GL
 * Method:    BufferSubDataS
 * Signature: (I[SIIJ)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_BufferSubDataS
  (JNIEnv *, jclass, jint, jshortArray, jint, jint, jlong);

/*
 * Class:     flat_backend_GL
 * Method:    BufferSubDataI
 * Signature: (I[IIIJ)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_BufferSubDataI
  (JNIEnv *, jclass, jint, jintArray, jint, jint, jlong);

/*
 * Class:     flat_backend_GL
 * Method:    BufferSubDataF
 * Signature: (I[FIIJ)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_BufferSubDataF
  (JNIEnv *, jclass, jint, jfloatArray, jint, jint, jlong);

/*
 * Class:     flat_backend_GL
 * Method:    BufferSubDataBuffer
 * Signature: (ILjava/nio/Buffer;IIJ)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_BufferSubDataBuffer
  (JNIEnv *, jclass, jint, jobject, jint, jint, jlong);

/*
 * Class:     flat_backend_GL
 * Method:    BufferReadDataB
 * Signature: (I[BIIJ)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_BufferReadDataB
  (JNIEnv *, jclass, jint, jbyteArray, jint, jint, jlong);

/*
 * Class:     flat_backend_GL
 * Method:    BufferReadDataS
 * Signature: (I[SIIJ)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_BufferReadDataS
  (JNIEnv *, jclass, jint, jshortArray, jint, jint, jlong);

/*
 * Class:     flat_backend_GL
 * Method:    BufferReadDataI
 * Signature: (I[IIIJ)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_BufferReadDataI
  (JNIEnv *, jclass, jint, jintArray, jint, jint, jlong);

/*
 * Class:     flat_backend_GL
 * Method:    BufferReadDataF
 * Signature: (I[FIIJ)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_BufferReadDataF
  (JNIEnv *, jclass, jint, jfloatArray, jint, jint, jlong);

/*
 * Class:     flat_backend_GL
 * Method:    BufferReadDataBuffer
 * Signature: (ILjava/nio/Buffer;IIJ)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_BufferReadDataBuffer
  (JNIEnv *, jclass, jint, jobject, jint, jint, jlong);

/*
 * Class:     flat_backend_GL
 * Method:    BufferCopy
 * Signature: (IIJJJ)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_BufferCopy
  (JNIEnv *, jclass, jint, jint, jlong, jlong, jlong);

/*
 * Class:     flat_backend_GL
 * Method:    BufferMap
 * Signature: (IJJI)J
 */
JNIEXPORT jlong JNICALL Java_flat_backend_GL_BufferMap
  (JNIEnv *, jclass, jint, jlong, jlong, jint);

/*
 * Class:     flat_backend_GL
 * Method:    BufferUnmap
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_BufferUnmap
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    BufferFlush
 * Signature: (IJJ)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_BufferFlush
  (JNIEnv *, jclass, jint, jlong, jlong);

/*
 * Class:     flat_backend_GL
 * Method:    BufferGetSize
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_BufferGetSize
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    BufferGetUsage
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_BufferGetUsage
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    BufferGetAcess
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_BufferGetAcess
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    BufferIsMapped
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_flat_backend_GL_BufferIsMapped
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramCreate
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_ProgramCreate
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramDestroy
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_ProgramDestroy
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramLink
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_ProgramLink
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramUse
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_ProgramUse
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramGetUsed
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_ProgramGetUsed
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramIsDeleted
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_flat_backend_GL_ProgramIsDeleted
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramIsLinked
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_flat_backend_GL_ProgramIsLinked
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramIsValidated
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_flat_backend_GL_ProgramIsValidated
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramGetLog
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_flat_backend_GL_ProgramGetLog
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramAttachShader
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_ProgramAttachShader
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramDetachShader
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_ProgramDetachShader
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramGetAttachedShadersCount
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_ProgramGetAttachedShadersCount
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramGetAttachedShaders
 * Signature: (I[I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_ProgramGetAttachedShaders
  (JNIEnv *, jclass, jint, jintArray);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramGetAttributesCount
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_ProgramGetAttributesCount
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramGetAttributeName
 * Signature: (II)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_flat_backend_GL_ProgramGetAttributeName
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramGetAttributeType
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_ProgramGetAttributeType
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramGetAttributeSize
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_ProgramGetAttributeSize
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramGetAttributeId
 * Signature: (ILjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_ProgramGetAttributeId
  (JNIEnv *, jclass, jint, jstring);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramGetUniformsCount
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_ProgramGetUniformsCount
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramGetUniformName
 * Signature: (II)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_flat_backend_GL_ProgramGetUniformName
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramGetUniformType
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_ProgramGetUniformType
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramGetUniformSize
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_ProgramGetUniformSize
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramGetUniformId
 * Signature: (ILjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_ProgramGetUniformId
  (JNIEnv *, jclass, jint, jstring);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramGetUniformBlocksCount
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_ProgramGetUniformBlocksCount
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramGetUniformBlockName
 * Signature: (II)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_flat_backend_GL_ProgramGetUniformBlockName
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramGetUniformBlockBinding
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_ProgramGetUniformBlockBinding
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramGetUniformBlockSize
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_ProgramGetUniformBlockSize
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramGetUniformBlockId
 * Signature: (ILjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_ProgramGetUniformBlockId
  (JNIEnv *, jclass, jint, jstring);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramUniformBlockBinding
 * Signature: (III)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_ProgramUniformBlockBinding
  (JNIEnv *, jclass, jint, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramGetUniformBlockChildrenCount
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_ProgramGetUniformBlockChildrenCount
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramGetUniformBlockChildren
 * Signature: (II[I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_ProgramGetUniformBlockChildren
  (JNIEnv *, jclass, jint, jint, jintArray);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramSetTFVars
 * Signature: (I[Ljava/lang/String;I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_ProgramSetTFVars
  (JNIEnv *, jclass, jint, jobjectArray, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramGetTFVarsCount
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_ProgramGetTFVarsCount
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramTFVarsBufferMode
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_ProgramTFVarsBufferMode
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramGetTFVarName
 * Signature: (II)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_flat_backend_GL_ProgramGetTFVarName
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramGetTFVarType
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_ProgramGetTFVarType
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramGetTFVarSize
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_ProgramGetTFVarSize
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramGetTFVarId
 * Signature: (ILjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_ProgramGetTFVarId
  (JNIEnv *, jclass, jint, jstring);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramSetUniformI
 * Signature: (III[II)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_ProgramSetUniformI
  (JNIEnv *, jclass, jint, jint, jint, jintArray, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramSetUniformF
 * Signature: (III[FI)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_ProgramSetUniformF
  (JNIEnv *, jclass, jint, jint, jint, jfloatArray, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramSetUniformMatrix
 * Signature: (IIIIZ[FI)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_ProgramSetUniformMatrix
  (JNIEnv *, jclass, jint, jint, jint, jint, jboolean, jfloatArray, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramSetUniformBuffer
 * Signature: (IIIILjava/nio/Buffer;I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_ProgramSetUniformBuffer
  (JNIEnv *, jclass, jint, jint, jint, jint, jobject, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramGetUniformI
 * Signature: (II[II)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_ProgramGetUniformI
  (JNIEnv *, jclass, jint, jint, jintArray, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramGetUniformF
 * Signature: (II[FI)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_ProgramGetUniformF
  (JNIEnv *, jclass, jint, jint, jfloatArray, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ProgramGetUniformBuffer
 * Signature: (IIILjava/nio/Buffer;I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_ProgramGetUniformBuffer
  (JNIEnv *, jclass, jint, jint, jint, jobject, jint);

/*
 * Class:     flat_backend_GL
 * Method:    VertexArrayCreate
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_VertexArrayCreate
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    VertexArrayDestroy
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_VertexArrayDestroy
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    VertexArrayBind
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_VertexArrayBind
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    VertexArrayGetBound
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_VertexArrayGetBound
  (JNIEnv *, jclass);

/*
 * Class:     flat_backend_GL
 * Method:    VertexArrayAttribEnable
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_VertexArrayAttribEnable
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     flat_backend_GL
 * Method:    VertexArrayAttribIsEnabled
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_flat_backend_GL_VertexArrayAttribIsEnabled
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    VertexArrayAttribSetDivisor
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_VertexArrayAttribSetDivisor
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     flat_backend_GL
 * Method:    VertexArrayAttribGetDivisor
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_VertexArrayAttribGetDivisor
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    VertexArrayAttribPointer
 * Signature: (IIZJIJ)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_VertexArrayAttribPointer
  (JNIEnv *, jclass, jint, jint, jboolean, jlong, jint, jlong);

/*
 * Class:     flat_backend_GL
 * Method:    VertexArrayAttribPointerB
 * Signature: (IIZI[BI)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_VertexArrayAttribPointerB
  (JNIEnv *, jclass, jint, jint, jboolean, jint, jbyteArray, jint);

/*
 * Class:     flat_backend_GL
 * Method:    VertexArrayAttribPointerS
 * Signature: (IIZI[SI)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_VertexArrayAttribPointerS
  (JNIEnv *, jclass, jint, jint, jboolean, jint, jshortArray, jint);

/*
 * Class:     flat_backend_GL
 * Method:    VertexArrayAttribPointerI
 * Signature: (IIZI[II)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_VertexArrayAttribPointerI
  (JNIEnv *, jclass, jint, jint, jboolean, jint, jintArray, jint);

/*
 * Class:     flat_backend_GL
 * Method:    VertexArrayAttribPointerF
 * Signature: (IIZI[FI)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_VertexArrayAttribPointerF
  (JNIEnv *, jclass, jint, jint, jboolean, jint, jfloatArray, jint);

/*
 * Class:     flat_backend_GL
 * Method:    VertexArrayAttribPointerD
 * Signature: (IIZI[DI)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_VertexArrayAttribPointerD
  (JNIEnv *, jclass, jint, jint, jboolean, jint, jdoubleArray, jint);

/*
 * Class:     flat_backend_GL
 * Method:    VertexArrayAttribPointerBuffer
 * Signature: (IIZIILjava/nio/Buffer;I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_VertexArrayAttribPointerBuffer
  (JNIEnv *, jclass, jint, jint, jboolean, jint, jint, jobject, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ShaderCreate
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_ShaderCreate
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ShaderDestroy
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_ShaderDestroy
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ShaderCompile
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_ShaderCompile
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ShaderIsDeleted
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_flat_backend_GL_ShaderIsDeleted
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ShaderIsCompiled
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_flat_backend_GL_ShaderIsCompiled
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ShaderGetLog
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_flat_backend_GL_ShaderGetLog
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ShaderGetType
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_flat_backend_GL_ShaderGetType
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    ShaderSetSource
 * Signature: (ILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_ShaderSetSource
  (JNIEnv *, jclass, jint, jstring);

/*
 * Class:     flat_backend_GL
 * Method:    ShaderGetSource
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_flat_backend_GL_ShaderGetSource
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TransformFeedbackBegin
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_TransformFeedbackBegin
  (JNIEnv *, jclass, jint);

/*
 * Class:     flat_backend_GL
 * Method:    TransformFeedbackEnd
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_flat_backend_GL_TransformFeedbackEnd
  (JNIEnv *, jclass);

#ifdef __cplusplus
}
#endif
#endif
